package main

import (
	"flag"
	"fmt"
	"log"
	"net"
	"os"
	"time"
	"sync"
)

var buff_size int = 1024

func logAndExitIfError(err error, expected error) {
	if err != expected {
		log.Fatal(err)
	}
}

func connectionHandler(connection net.Conn, err *error)  {
	// create a buffer for storage
	rbuff := make([]byte, buff_size)
	defer connection.Close()

	// read the http packet
	_, *err = connection.Read(rbuff)
	if *err != nil {
		return
	}

	// TODO: need to call the handler registered with the server to handle request - GET and POST
	// do the work - represented as time delay to do the work
	fmt.Println("<< (", connection.RemoteAddr().String(), "):\n", string(rbuff))
	time.Sleep(10 * time.Second)

	// return response if necessary
	fmt.Println(">> (", connection.RemoteAddr().String(), "):")
	_, *err = connection.Write(([]byte("HTTP/1.1 200 OK\r\n\r\nThank You.\r\n")))
	if *err != nil {
		return
	}
	return
}

func main() {
	// check if user arg exist
	if len(os.Args) < 2 {
		log.Fatal("Port number missing.\nExample: `-p 1278`")
	}

	
	// flags declaration using flag package for user arg extraction
	var port string
	flag.StringVar(&port, "p", "", "Specify port number. Example: -p 1278")
	flag.Parse()  // after declaring flags we need to call it
	port = ":" + port
		
	// max connections to handle at a time
	const (
		max_connections = 10
	)
	connection_count := 0

	// create a TCP listner
	listner, err := net.Listen("tcp", port)
	logAndExitIfError(err, nil)
	fmt.Println("Server created.")

	var wgroup sync.WaitGroup	// used to wait for all the goroutines launched here to finish
	wgroup.Add(1)

	// cam launch the server in a thread and continue the main function
	go func(){
		for {
			// TODO: FixMe: currently we drop additional connection request
			for connection_count <= 10 {
				// wait until a new connection is establish
				fmt.Println("Waiting for new connection...")
				connection, err := listner.Accept()
				logAndExitIfError(err, nil)
				connection_count++
				fmt.Println(connection_count, ": New connection from", connection.RemoteAddr().String())
				
				// handle the connection request
				go connectionHandler(connection, &err)
				logAndExitIfError(err, nil)
				connection_count--
			}
		}
		wgroup.Done()
	}()
	
	// continue main function in parallel to above server


	wgroup.Wait()	// always wait for server to close.
	return
}

// command to run n programs in parallel on single command prompt without blocking it
// for /L %i in (1, 1, 10) do start /b curl http://127.0.0.1:1278 -d "client %i"

